from django.http import HttpResponse
from django.db.models import Sum, Avg

import os
os.environ['TZ'] = "GMT"
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")
from uber.models import TripEvent, UberBase

#import from python
import time
import datetime
from datetime import timedelta, datetime

#import from app uber
import city

def index(request):
    return HttpResponse("Hello, world. You're at the uber index.")

'''
##########TEST
def test1(request):
    result = request.GET
    return HttpResponse(result['first'])
'''

'''
total number of trips
'''
def tripCount(request, s):
    result = getTripCount(None, None)

    return HttpResponse("Total num of trips: %s" % ( result ))

#######################################
############ RESTful APIs #############
#######################################

'''
total number of trips by date
'''
def tripCountByDate(request, starttime, endtime):
    result = getTripCount(starttime, endtime)

    return HttpResponse("Total num of trips (during %s - %s): %s" % ( starttime, endtime, result ))

'''
total number of trips in the last hour
''' 
def tripCountLastHour(request, s):
    dtNow = datetime.now()
    dtLastHour = dtNow - timedelta(hours=1)
    result = TripEvent.objects.filter(start_time__gte=dtLastHour.strftime("%s")) \
                              .filter(start_time__lt=dtNow.strftime("%s")) \
                              .count()
    
    return HttpResponse("Total num of trips in the last hour: %s. dtNow=%s, dtLastHour=%s" % \
                            ( result, dtNow.strftime("%s"), dtLastHour.strftime("%s") ) )

'''
total number of clients whove taken trips
'''
def clientCountFinished(request, s):
    result = getClientCount(True, None, None)

    return HttpResponse("Total num of clients who've taken trips: %s" % ( result ))

'''
total number of clients whove taken trips by date
'''
def clientCountFinishedByDate(request, starttime, endtime):
    result = getClientCount(True, starttime, endtime)

    return HttpResponse("Total num of clients who've taken trips (during %s - %s): %s" % ( starttime, endtime, result ))

'''
total numbers of clients
'''
def clientCount(request, s):
    result = getClientCount(False, None, None)
    
    return HttpResponse("Total num of clients: %s" % ( result ))

'''
total numbers of clients by date
'''
def clientCountByDate(request, starttime, endtime):
    result = getClientCount(False, starttime, endtime)

    return HttpResponse("Total num of clients (during %s - %s): %s" % ( starttime, endtime, result ))

'''
total miles per client
'''
def milesPerClient(request, cid):
    result = getMilesPerClient(cid, None, None)
    
    return HttpResponse("Totla miles per client(id=%s): %s" % (cid, result[0][1]))

'''
total miles per client by date
'''
def milesPerClientByDate(request, cid, starttime, endtime):
    result = getMilesPerClient(cid, starttime, endtime)
    
    return HttpResponse("Totla miles per client(id=%s): %s" % (cid, result[0][1]))

'''
avg fare for a specific city (where a city can be defined as a square)
'''
def avgFareInCity(request, ctname):
    result = getFaresInCityResult(ctname, None, None)

    return HttpResponse("Average fare for a specific city: %s" % (result['fare__avg']))

'''
avg fare for a specific city (where a city can be defined as a square) by date
'''
def avgFareInCityByDate(request, ctname, starttime, endtime):
    result = getFaresInCityResult(ctname, starttime, endtime)
                                         
    return HttpResponse("Average fare for a specific city (during %s - %s): %s" % (starttime, endtime, result['fare__avg']))

'''
median rating for a driver
'''
def medianDriverRating(request, did):
    result = getRecordsByDriver(did, None, None)
    
    return HttpResponse("Median rating for a driver(id=%s): %s" % \
                            (did, result['rating__avg']))

'''
median rating for a driver by date
'''
def medianDriverRatingByDate(request, did, starttime, endtime):
    result = getRecordsByDriver(did, starttime, endtime)
    
    return HttpResponse("Median rating for a driver(id=%s): %s" % \
                            (did, result['rating__avg']))

############################################
############ Private functions #############
############################################

'''
Convert starttime & endtime to unix time
'''
def convertDateStringToUnixTime(starttime, endtime):
    return ( datetime.strptime(starttime, "%Y%m%d").strftime("%s"), datetime.strptime(endtime, "%Y%m%d").strftime("%s") )

def getTripCount(starttime, endtime):
    
    result = TripEvent.objects

    if starttime is not None and endtime is not None:
        ( unixtime_start, unixtime_end ) = convertDateStringToUnixTime(starttime, endtime)
        result = result.filter(start_time__range=(unixtime_start, unixtime_end))

    return result.count()
    

def getClientCount(finished, starttime, endtime):

    result = TripEvent.objects
    
    if finished:
        now = int(time.time())
        result = result.filter(start_time__lt=now)

    if starttime is not None and endtime is not None:
        ( unixtime_start, unixtime_end ) = convertDateStringToUnixTime(starttime, endtime)
        result = result.filter(start_time__range=(unixtime_start, unixtime_end))
    
    return result.values_list('client_id', flat=True).distinct().count()

def getMilesPerClient(cid, starttime, endtime):

    result = TripEvent.objects.filter(client_id=cid)

    if starttime is not None and endtime is not None:
        ( unixtime_start, unixtime_end ) = convertDateStringToUnixTime(starttime, endtime)
        result = result.filter(start_time__range=(unixtime_start, unixtime_end))

    return result.values_list('client_id', 'distance') \
                 .annotate(total_miles=Sum('distance')) \
                 .values_list('client_id', 'total_miles')

def getFaresInCityResult(ctname, starttime, endtime):

    max_lat = max(city.city_coordinates[ctname][0][0], city.city_coordinates[ctname][1][0])
    min_lat = min(city.city_coordinates[ctname][0][0], city.city_coordinates[ctname][1][0])
    max_lng = max(city.city_coordinates[ctname][0][1], city.city_coordinates[ctname][1][1])
    min_lng = min(city.city_coordinates[ctname][0][1], city.city_coordinates[ctname][1][1])

    result = TripEvent.objects.filter(lat__range=(min_lat, max_lat)) \
                              .filter(lng__range=(min_lng, max_lng))

    if starttime is not None and endtime is not None:
        ( unixtime_start, unixtime_end ) = convertDateStringToUnixTime(starttime, endtime)
        result = result.filter(start_time__range=(unixtime_start, unixtime_end))

    return result.aggregate(Avg('fare'))

def getRecordsByDriver(did, starttime, endtime):
    result = TripEvent.objects.filter(driver_id=did)

    if starttime is not None and endtime is not None:
        ( unixtime_start, unixtime_end ) = convertDateStringToUnixTime(starttime, endtime)
        result = result.filter(start_time__range=(unixtime_start, unixtime_end))

    return result.aggregate(Avg('rating'))
